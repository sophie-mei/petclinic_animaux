# This workflow will:
#  - build a Java project with Maven
#  - build a docker image and publish it to Azure Container Registry
#  - deploy the image to a AKS cluster

name: Java CI/CD with Maven and Azure

on:
  push:
    branches: [ sophie ]
  pull_request:
    branches: [ sophie ]
# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: mycontainerregistrypetclinic.azurecr.io
  CLUSTER_NAME: myAKSClustersz
  CLUSTER_RESOURCE_GROUP: myResourceGroup
  NAMESPACE: test
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    
    # Caching the Maven dependencies to speed up the workflow exection time
    - name: Cache Maven dependencies
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
   
    # Test and package the source code with Maven    
    - name: Test with Maven
      run: mvn -B test --file pom.xml
    - name: Package with Maven
      run: mvn -B package --file pom.xml -P MySQL -DskipTests=true

    # Move the application to the Dockerfile directory
    - name: Move the package to ./tomcat_petclinic/
      run: |
        mv ./target/petclinic.war ./tomcat_petclinic/petclinic.war
 # Connect to Azure Container Registry (ACR) 
    - name: Docker login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # Container build and push to a Azure Container Registry (ACR)
    - run: |
        docker build ./tomcat_petclinic -t ${{ env.REGISTRY_NAME }}/sz
        #docker /it-sz-petclinic pcacr.azurecr.io/it-sz-petclinic:dev
        docker push ${{ env.REGISTRY_NAME }}/sz
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    # Create imagepullsecret for Azure Container registry (ACR)
    - uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}

    # Deploy app to AKS
    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          manifests/petclinic-deployment.yaml
          manifests/petclinic-service.yaml
         # mycontainerregistrypetclinic.azurecr.io/sz
        images: |
          ${{ env.REGISTRY_NAME }}.azurecr.io/sz
        imagepullsecrets: |
          ${{ env.REGISTRY_NAME }}-registry-connection
        namespace: ${{ env.NAMESPACE }}

